 Theme(
                  data: ThemeData.dark().copyWith(
                    indicatorColor: Colors.deepPurpleAccent,
                  ),
                  child: Builder(builder: (context) {
                    final theme = Theme.of(context);

                    return Container(
                      width: double.infinity,
                      margin: const EdgeInsets.only(
                        top: 40,
                      ),
                      padding: const EdgeInsets.all(20),
                      color: theme.scaffoldBackgroundColor,
                      child: Column(
                        children: [
                          _buildLabel('Dark Style', color: Colors.white70),
                          Center(
                            child: AdvancedSegment(
                              controller: _selectedSegment_05,
                              segments: const {
                                'all': 'All',
                                'missed': 'Missed',
                              },
                              backgroundColor: theme.cardColor,
                              activeStyle: const TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.w600,
                              ),
                              inactiveStyle: const TextStyle(
                                color: Colors.white,
                              ),
                              sliderColor: theme.indicatorColor,
                            ),
                          ),
                          SizedBox(
                            height: 128,
                            child: Center(
                              child: Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.only(
                                      bottom: 8.0,
                                    ),
                                    child: Text(
                                      'Selected segment:',
                                      style: Theme.of(context)
                                          .textTheme
                                          .headlineSmall,
                                    ),
                                  ),
                                  ValueListenableBuilder<String>(
                                    valueListenable: _selectedSegment_05,
                                    builder: (_, key, __) {
                                      switch (key) {
                                        case 'all':
                                          return const Text(
                                            'All calls',
                                            style: TextStyle(
                                              color: Colors.white,
                                              fontWeight: FontWeight.w600,
                                            ),
                                          );
                                        case 'missed':
                                          return const Text(
                                            'Missed calls',
                                            style: TextStyle(
                                              color: Colors.white,
                                              fontWeight: FontWeight.w600,
                                            ),
                                          );
                                        default:
                                          return const SizedBox();
                                      }
                                    },
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),
                    );
                  }),
                ),












                SettingsItem(
                  onTap: () {},
                  icons: Icons.dark_mode_rounded,
                  iconStyle: IconStyle(
                    iconsColor: Colors.white,
                    withBackground: true,
                    backgroundColor: Colors.red,
                  ),
                  title: 'Dark mode',
                  subtitle: "Automatic",
                  trailing: Switch.adaptive(
                    value: false,
                    onChanged: (value) {},
                  ),
                ),






  // static Future createStudent(UserModel value, String docID) async {
  //   final dbData = _db.doc(docID);
  //   UserModel data = UserModel(
  //       id: docID,
  //       name: value.name,
  //       username: value.username,
  //       email: value.email,
  //       password: value.password);
  //   final dataToPass = data.tojson();
  //   await dbData.set(dataToPass);
  // }